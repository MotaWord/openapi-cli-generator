// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/commands.tmpl
// templates/main.tmpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesCommandsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5b\x73\xdb\xb8\x15\x7e\x26\x7f\x05\x96\xe3\xec\x90\xb1\x4c\x65\xb7\x3b\x7d\x50\x57\x9d\x49\x9c\xc4\xf6\x4c\xec\xb8\xb6\xb3\x79\x70\x3d\x35\x44\x1e\x49\x1c\x93\x00\x0d\x42\xbe\x54\xcb\xff\xde\x39\x00\x48\x82\x17\xc9\x72\xda\x97\xbe\x38\x12\x0f\x88\x73\xff\xce\x45\x19\x8f\xc9\x21\x8f\x81\x2c\x80\x81\xa0\x12\x62\x32\x7b\x26\x3c\x07\x46\xf3\xe4\x20\x4a\x93\x03\x43\xe0\x22\x24\x1f\xbf\x92\xb3\xaf\x57\xe4\xd3\xc7\x93\xab\xd0\x1d\x8f\xc9\x25\x00\x59\x4a\x99\x17\x93\xf1\x78\x91\xc8\xe5\x6a\x16\x46\x3c\x1b\x67\x5c\xd2\x47\x2e\xe2\xf1\xe0\x35\xae\x9b\xd3\xe8\x8e\x2e\x80\xac\xd7\xe1\x11\x3f\xd7\x5f\xca\xd2\x75\x93\x2c\xe7\x42\x12\xdf\x75\xd6\x6b\x92\xcc\x49\x78\xa2\x1e\x14\xe1\xe7\x4c\x92\xb2\xf4\xe6\x99\xf4\xd6\x6b\x02\x2c\x26\x65\xd9\x3b\x74\x29\x45\xc2\x16\x05\x1e\x2c\xf4\xc7\x2d\x87\xaf\x92\x0c\xf0\xa4\x4c\x32\xb0\x8e\xb9\x8e\xb7\xb3\x1e\xe3\x28\x4d\xbc\xf6\x0b\xf9\xdd\x62\x0c\x42\x70\x51\x74\x08\xa2\x18\xff\x1b\x04\x4f\xf9\x62\x9c\xf2\x45\x87\x58\xe4\xf3\x5f\xfe\x32\x8e\xf8\x4c\xd0\x41\xca\x43\x92\x83\x50\x14\x9e\xdf\x2d\xc2\x84\x8d\x97\xbf\x32\xce\xc6\x0b\x60\x32\x85\x8c\xb2\xf0\xe1\x57\xcf\x0d\x5c\x77\xbd\x26\x31\xcc\x13\x06\xc4\xcb\xa9\xa0\x59\xe1\x19\xd5\x0f\x88\xa0\x6c\x01\x24\xfc\x9a\xcb\x84\x33\x9a\x9e\x2b\xb2\xa2\x2a\x72\x32\x27\x70\x4f\xc2\xab\xe7\x1c\x88\x37\xe3\x3c\x05\xca\xf4\xcb\x8e\x13\x65\x71\xf8\x39\xa5\x8b\xc2\x0f\xc2\x0f\x9c\xa7\x3e\xda\x2b\x3c\xfc\x72\x72\x46\xb5\x0d\x47\x64\x4e\xd3\x02\x46\x44\x11\x3e\x42\x11\x89\x44\xf1\x41\x62\x60\x38\x40\x5a\x40\x9b\x4d\xc2\xe4\x5f\x7f\x1b\x62\x72\x82\x84\x01\x2e\xef\x5e\xcb\x61\x9e\x72\xba\x81\xc7\x67\x4d\x1a\xe2\x12\xee\xc2\xa7\x7f\xa3\x0e\xbf\x81\x0b\x3d\xef\x85\xfb\xea\x08\x3d\x68\xc2\xd0\xf2\xd9\x77\x9a\x48\x10\xc6\x59\x7d\x67\x3c\xd2\x44\x1e\xe0\xf5\xfa\xdc\x66\xc7\x18\xfa\xe5\x12\x73\x4c\xf3\x6f\xb1\x8c\xd2\x24\xbc\x04\x79\xb8\x2a\x24\xcf\x34\x8f\x28\x8b\x03\xd7\x75\x92\x39\xb1\xf9\x1e\xd3\xc2\x7c\x24\x6b\xd7\x71\x74\xa8\x85\x1f\x12\x16\x9f\xd7\xaf\x55\x87\x03\xd7\x29\x5d\x2b\xbf\xd6\x6b\xb2\xc7\x50\xbc\xc9\x94\x84\x46\x4e\xf5\x90\xe6\x89\x7a\x76\xc4\x3b\x4f\xcf\x57\xb3\x34\x89\x14\x4d\x7f\x6c\x4e\xb8\x0f\x54\x90\xea\xe5\xb2\xbc\x5c\xcd\x22\x9e\x65\x94\xc5\x04\x43\xd8\x75\xe7\x2b\x16\xd9\x74\x10\x0f\x20\x50\xec\xeb\x9b\x8c\xe6\xd7\x1a\x25\x6e\xf4\x3f\xa8\x8a\x00\xb9\x12\x6c\x88\xba\x56\xbe\x32\x1e\xd9\x2b\xd4\x45\x4a\x24\x73\xa7\x89\x87\xc1\xf7\x1c\xc7\x8b\x1b\xcf\x7b\x13\xe5\x0d\x73\x47\x37\x26\x46\xfa\xfc\x4a\xa4\x9d\x73\xdf\x2e\xbe\xd4\xf4\x72\xa4\xa5\xa9\x02\xa7\x74\xb5\x61\x8d\x74\x0b\xc1\x57\xb9\xb6\x25\x7e\xd2\xb2\xa1\xa5\xa2\x2c\x56\x4f\xf0\x5a\x75\xa8\x31\x36\x99\x92\x9f\x15\x00\x85\x87\xda\x82\x28\xf8\xb7\x02\x8c\x10\xfa\x74\x1d\x56\xae\xe3\xa8\x28\x6a\x51\xeb\xb8\x42\xf2\x17\xce\x16\x13\x72\xdb\x50\xf1\x01\x29\xcb\xdb\x51\x3f\x1e\x8c\xd8\x3c\x47\x58\x45\x3b\xa0\xe8\x5f\xab\x6f\x5a\xfc\xf1\x98\xb4\xc3\xa1\x2c\x31\xa4\x1b\xf9\xf1\x5b\x25\x81\xeb\xd8\x8e\x1f\x7e\xc1\xaf\x19\x87\x17\x70\xbf\x4a\x04\xc4\x35\x26\xb6\x6f\xd6\x8e\x1c\x91\x5a\x68\x1d\xef\xe4\xad\x82\xe5\xf0\x0f\xfc\x6b\x8a\xcb\x21\x65\xc7\xf4\x01\x3e\xf0\xf8\x99\x94\xe5\x88\xcc\xf0\x83\x09\x84\xea\xed\x80\xf8\x6f\x1b\xe0\xbe\x80\x22\xe7\x0c\x53\x14\x99\x5e\xa8\xf8\x53\xd8\x85\xaf\xab\x4a\xa2\x73\x6c\x49\x59\x9c\x82\x38\xa7\x72\x89\xe6\x51\xf9\x7c\xac\x9f\x55\x5e\x71\x1d\xcc\xd3\xc1\x6c\x50\x51\x68\x5f\xa1\x6f\xd0\x89\x58\x96\xc4\x23\xfb\xc4\x22\xbb\x8e\x83\x78\xe0\x34\x61\xae\x55\x3d\x02\x59\x81\x9c\x26\x29\x08\x4b\xe6\xc4\x1c\x9c\x4e\x89\xe7\x69\x66\xd5\x93\xa1\xec\xbb\xae\x6f\x3b\x61\xb2\xba\xea\x20\x61\x31\x3c\x79\xc1\xcd\xb5\x0a\xfe\x9b\x4a\x86\x95\x48\x51\x00\x7d\x68\x5f\xe9\xad\x34\x40\x85\x0d\x7e\x9a\xf8\x49\x46\x64\x4f\xb9\x46\xc5\x4f\xcf\xa9\x28\x55\x53\xe9\xf4\xc9\xf0\x84\x61\xa5\x94\xcb\xaa\x42\x28\x76\x53\xe3\xb2\x22\xbc\x80\x3c\xa5\x11\xf8\x2b\x91\x2a\x0c\xbd\x5d\xdf\xaa\xe8\x30\x6f\x1b\xcb\xaf\xd7\xb7\xe5\xad\x42\xdb\x86\x54\x87\xcf\x88\xfc\x12\x54\xac\xab\x7c\x6d\xc3\xae\x23\xe0\x1e\x45\x46\xf8\x3d\x4c\x13\x60\x32\x44\x2d\x4f\x41\x2e\x39\x1e\xf1\x03\x4c\x7e\x94\x21\x70\x5b\x28\xb4\x93\xc2\x7d\x7d\xef\x57\x20\x9e\x6b\x85\x91\xf9\x94\x08\xb8\x0f\xdf\xc7\xf1\x3f\x90\xa4\x2b\x58\x53\x42\x06\x94\x32\x1a\xd9\x15\xd7\x62\xb0\x04\x1a\x83\x18\xe6\x70\xac\x68\xaf\x61\xd1\xd8\xcc\x32\xd9\x0b\x1d\x8d\xd3\xce\xe0\xc9\x94\x98\x1a\x75\x04\x12\x49\x2a\xc3\xfe\x24\x32\x91\xa9\xc2\x82\x6e\xcd\x56\xcc\x75\x32\x59\xd7\xfc\xa4\xa2\x59\xbd\x7c\x96\xa4\x0a\x74\x94\x82\x56\xff\xd4\xb7\xef\x0e\x06\x9e\x67\x32\xbc\xcc\x45\xc2\xe4\xdc\xf7\xde\x3c\x68\x7b\x58\x96\x08\x6a\x2e\x76\x87\x33\x60\xe9\x5d\x4c\xfd\x0a\x66\x95\xe5\x9d\x7e\xc8\x0e\xe2\x9d\x31\x9a\x02\xbd\x9f\x1a\x28\x18\x96\xea\x90\x33\x09\x4c\x1e\xa0\x35\xab\xfe\xe8\x14\xe2\x84\x1a\xf4\xf3\xb0\xbd\x89\x9f\x0d\xde\xe0\x9d\x41\x23\x8a\x25\x09\x66\x8d\x06\xc2\x0f\x30\xe7\x02\x7c\x0b\xc7\x46\xc6\xed\x23\x64\x1e\xe8\x54\x2b\x72\x85\xab\x18\x13\x28\xd1\x47\xee\x1b\x0c\xc3\x87\x3f\x4d\x09\x4b\x52\x2d\xb6\xe9\x05\x58\x92\x8e\xf4\x1f\xdd\xd7\x87\xdf\x05\xcd\x7d\x10\x62\x44\x3c\x4c\x39\x28\x24\x99\xd3\x24\x85\x58\x45\x8d\x92\x09\x6b\x6d\x0c\x11\x8f\x21\xee\xc3\xba\xab\xd9\xa1\x24\xe1\xa5\xa4\x72\x55\xa8\xe9\xeb\x77\xf2\xdb\xbb\x77\x9a\xb3\x11\xc6\x40\xc2\x37\x96\x51\x51\x2c\x69\x5a\x95\x0a\x5f\x2b\xf1\xb3\xe1\x10\xfc\xad\x27\xfa\x2e\xb2\xd7\xd7\xa6\xd8\xfb\x08\x73\xb7\xad\x8a\xb2\x75\xa9\x63\x6e\xab\x45\x3e\xe1\x3f\x73\xdf\x3b\xbe\xba\x3a\x27\x6f\xe2\x09\x79\x53\x78\xa3\xae\x82\xf5\x03\xe5\xcf\xa0\xb6\x15\x9d\x4b\xa8\x75\xd5\x8e\x7c\x8f\x8f\x36\xf9\x11\x55\xaf\x34\xd7\x96\xd4\x37\xd8\xfa\x57\xb6\x9f\x6a\x9a\x0e\x56\x06\x2d\x47\xe0\xf4\x01\x62\x4e\x23\x58\x97\x98\x40\xa1\xdf\xf3\x54\x60\xc3\x8f\x41\x6a\x65\x81\x96\x14\xca\x16\x1b\x9b\x9a\x47\xd5\x73\x2b\x80\xb6\xdb\xf8\x57\xf5\x27\x75\x2b\xf4\xbf\xe8\x54\x02\xed\x35\x65\x28\x2a\x25\x64\xb9\x44\xe9\xde\xb9\x8e\x33\xe7\x82\x54\x8f\x7e\x57\xd2\x69\xe9\xc3\xf7\xfa\x61\x51\x43\x9e\x39\xb5\xbf\xef\xea\xb8\x68\x99\xc3\xc4\xee\x90\x76\x8d\x26\xff\x8d\x9e\x3d\x05\x03\x2b\x6b\x86\xf2\xa0\x1f\xfd\x87\x7c\x95\xc6\x84\x71\x49\x22\x9a\xa6\xc4\x78\xa9\xee\x40\xab\xf8\xc7\xbf\x98\xcc\x34\x92\x2b\x9a\x12\x2b\x64\x2a\x4a\x46\x65\xb4\xd4\xd3\x86\x63\xd7\x66\xf5\xdc\x38\xfe\x54\x7f\xae\x6a\x93\xa3\x6f\xd3\x86\xd2\x71\x7f\x04\x52\x1d\xfa\x83\xa6\x2b\x9d\xdf\xa1\xc2\xc7\x27\x69\x90\xf1\x12\x52\x88\x74\x73\x5d\x95\xb2\xf7\x69\x7a\x09\x52\x62\x9f\xe2\x07\xad\x9c\x18\xb6\xc5\x2e\xc6\x58\x80\x24\x95\xe4\x0f\x28\x8b\x36\x84\xb1\x84\xa3\x48\xb6\xdc\x4a\x68\x5d\x61\xae\x10\x08\x95\x7c\xd7\x37\xb3\x67\x09\x2a\x9d\x3e\x3d\xe5\x10\x49\x88\xc9\x9f\x44\x97\x1c\xe2\xbd\xb9\xc7\x6c\x0b\x46\xc6\xa6\x3f\x22\xef\x77\x23\xa1\xb6\x3d\x22\xd6\x4a\xd4\x92\xd6\x35\x52\x53\xcd\x5d\x75\x1f\xa4\x10\x09\x88\x57\xbd\x55\x97\xce\x0e\xbb\x0a\xd3\x74\xd2\x92\x88\x32\xb4\x8f\x00\x1a\x2d\x49\x0c\x05\x06\x27\x29\xd4\x55\x33\x88\xe8\xaa\x00\xf2\xa6\x20\x49\xa1\xa1\xaf\xe7\xb2\xed\xb6\xa8\x45\xb4\x16\x0b\x8e\xe3\xcc\x04\xd0\xbb\x86\x56\x57\x63\xa7\x6c\xb7\x46\xf8\x4d\x26\x19\x84\x97\x29\x40\xee\xeb\x45\x43\x4a\xb1\x22\xbf\xd5\xcf\x21\xe2\x2c\xae\x11\x17\x21\xd3\x64\xf9\xdf\xa7\x5b\xd3\xbc\x6d\x92\x33\x78\xf4\xbd\x53\xfa\x94\x64\xab\xac\xba\xa1\x20\xf0\x14\x01\xc4\x76\xf5\x6b\xca\x44\x07\x15\x3b\xd3\xf8\x05\x2c\x92\x02\x91\xbe\x68\x8f\xed\x6a\xe0\x11\x9c\xcb\xaa\x2a\x5c\x70\x2e\xf5\x12\xa2\x68\x8f\x34\xea\xd0\xd0\xe0\x6a\x4d\xae\xcc\x9a\x59\xed\xa1\x35\xbc\x32\xcd\x9f\xa6\xe8\x79\x55\xc7\xb4\xb8\x8b\xf9\x23\xf3\x07\x57\x36\x23\xb7\xee\x41\xfa\x63\xd6\x94\x48\xb1\x02\xd7\x2e\x9a\x95\xfc\x66\x36\x9d\x76\x78\xdb\x27\xd4\x84\x3c\xdd\x41\x06\xd7\xd1\x0b\xa2\xad\xf3\xbe\x09\x79\x33\x7d\x9f\x53\x01\x4c\x36\x4b\xab\xce\x1a\x40\x93\x1b\x84\xc5\x46\xcd\x98\xd3\xdf\xb2\x34\x08\xdc\x6e\xd8\xa2\x47\x5e\xf9\x72\xb3\x9e\xb5\x76\x5f\xaa\xbb\x6c\xed\xbd\x30\x46\x51\xc7\x8d\xce\xc6\x03\x6d\x2f\xe3\xfb\x44\x15\x35\x12\x81\x90\x34\x61\x04\x1e\xd0\x0c\x5c\xd4\xb9\x8b\x2d\x23\xd1\x11\x9b\xb0\x85\x1d\x0b\xde\x87\x94\x47\x77\x18\xe0\x10\xad\x94\xed\xd1\xc5\xab\x02\x0a\x92\x73\xdd\x35\x49\x4e\x72\x10\x09\x8f\x13\xac\x22\xcf\x24\x5a\x42\x74\xf7\x03\x1c\x4b\xb7\x6f\x39\x54\xa7\x33\xef\x6d\xe8\x25\x1c\xdd\x4d\x98\x65\x5c\xb5\x8e\x6b\xa6\x76\xcc\x5b\x8d\x31\x51\x16\x6f\x30\xa1\x95\x31\xe1\xb7\xa2\x49\x8b\x7a\xb8\x09\xdf\xa7\x09\x45\xdd\x6b\x78\x32\x0f\x26\xe4\xba\xb5\xea\x72\x5a\xc3\x59\xef\x2d\xc7\x51\x3c\x2c\x06\xdd\x61\xa3\xda\x6f\x0d\x10\xec\xf4\x6d\x6d\x9b\xb6\x24\xb0\xd9\x3b\xe9\xcc\x45\xb1\xc5\xa2\x98\x10\x6d\x81\xd3\x84\x21\x98\x9d\xe1\x33\xc4\xcd\x14\xd8\xd6\x2e\xa4\xba\xe3\x62\xc5\x26\x04\x8d\x8e\xf1\x4d\xde\xb6\xcc\x39\x22\x54\x2c\x8a\xda\x28\x95\x53\xec\xae\x7e\xc7\xbe\x6f\xef\xa9\x35\xdf\x6f\x91\x0b\x39\x5e\xe3\xad\x4f\xa4\x2c\x6f\xfa\xed\xd1\xc0\x84\xe0\x38\x4e\xca\x17\xe1\x67\x2a\x69\xea\x07\x58\xee\xb0\xb8\x06\xe1\x69\xb1\xf0\x3d\x55\xfc\x54\x53\x84\x11\x1a\x54\x5e\x71\x6d\xe7\xe8\x6f\x78\xa6\x93\xef\x81\x6b\x26\x48\x82\x15\x22\x55\xd5\xb6\xfa\x31\xa2\x51\xa2\x9a\x2c\xfd\xed\x30\xb0\xcb\x6a\xb0\x1d\xfe\xc3\xd1\x5f\xb5\x6b\xf0\x44\xb3\x3c\x85\xc2\xb4\xca\x6e\xbb\x69\x83\x27\x75\xff\xa7\xea\x90\x89\xbb\xfa\xa5\xfd\x29\xf1\x88\x5a\x96\xd5\xa0\x6d\x14\xc7\x29\xc5\x0f\xc8\x3e\xf1\x94\x77\x6b\x79\x4d\x32\xa9\x87\x80\xde\xf9\x27\xf3\xfa\xd5\x7b\x4b\x5e\x6e\x48\xcb\x4d\x59\xb9\x31\x29\xb7\xe6\x64\x2f\x25\xbb\x89\x57\x8e\x06\xb6\x02\xdb\xd2\x71\xc7\x6c\xac\xd4\x38\x4e\xe2\x18\x58\xcd\x4e\x7f\x9d\xa8\xb6\xa9\x26\x0d\x8a\x60\x5c\x35\xa9\x1d\xab\x4f\xbd\x98\xe4\x9b\x52\xfb\x47\x32\xbb\x52\xa2\xbf\x0c\x71\x9c\x19\x8f\x9f\x47\xf6\x34\x7f\x04\x12\x0f\xf8\xfd\x7d\x87\xbe\xfe\x7a\x58\xc2\xb2\x9c\xdc\x98\x3c\x1c\xec\x95\xb7\x24\xf3\x37\x46\x67\x29\x60\xad\xc2\xee\x1e\x05\xaa\x32\xba\xec\xa1\xac\xdd\x2c\x87\x67\x00\x71\x51\x2d\x1d\x48\x59\xe2\x58\xd2\x54\xfb\x7f\xd5\x21\xbc\xdb\xe8\xf7\x32\xc0\xbd\x16\xd6\xb6\xec\xdc\x9b\x65\xfb\x8f\xd9\x4c\x03\x60\x64\x96\x23\x9d\xb1\xb0\x1e\x87\x3a\x8b\x9a\xcf\x5c\x64\xd8\x16\x0b\xf3\xc9\xdf\xb2\xa0\xd9\xc6\xdc\xdc\x83\x9c\xed\x6d\x4c\xc3\x76\xa8\x3d\xd2\x13\xcc\xfd\x79\x8d\x7e\x43\x53\xa2\x5b\xa7\xf7\xe0\x0a\xd9\x82\xad\xc1\x65\x72\x8b\xc7\xb5\xd7\xdb\x83\x7b\x37\x64\x5a\x07\xf1\x1e\xf6\xc6\x37\x0d\xc3\x56\x84\x6d\x19\xaa\x07\xe3\x71\xf8\xa7\x50\xe3\x82\x66\xb5\xfb\xe2\xef\xa1\x4d\x35\x76\x1e\x37\x17\x8a\x36\x4f\x15\xa5\x85\x1a\xe6\xb8\x6e\xbe\x10\x49\xec\x8e\xe6\xf5\xf3\x7c\x73\x9f\x4a\xfc\xda\xa8\x9d\x31\x7e\x73\xe8\x6e\x0d\xa0\x97\xe7\x79\x3b\x9a\x50\x01\xb1\xa8\xd2\x0c\x15\xec\xaf\x88\xed\x59\x7d\xc8\x43\xed\xdf\x61\xe2\xae\xc1\x7a\x51\xf4\xff\x6f\x32\x13\x3e\xe1\x25\x48\x85\xe5\x7b\x49\x6c\x40\xfc\x45\x53\x6d\x6f\x04\x4d\xd0\x6e\x82\xcb\xa1\x40\xb4\xdc\x67\x81\xe4\xe3\xd6\xe6\x6f\x8b\x2d\xcc\xca\x43\x4d\xfd\x8d\xf2\x65\xbb\x0b\xec\xd4\x61\x5d\x9d\xad\xb1\xb3\x81\x12\x35\xff\x59\xff\x5d\x02\xfb\x98\xfe\x2f\x6c\x86\x32\x22\xde\x41\xbb\x81\x3a\x6a\xff\xf2\xac\xfe\x33\x85\xfe\x45\xcd\x9e\x2d\xbb\xe7\x37\x4d\xb2\x3b\x4d\xac\x41\xf7\x37\x86\x0d\xcd\xac\x59\x0c\xfb\x81\xdd\xb6\x96\xee\x7f\x02\x00\x00\xff\xff\xe1\xc5\x4e\xd2\x50\x25\x00\x00")

func bindataTemplatesCommandsTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesCommandsTmpl,
		"templates/commands.tmpl",
	)
}



func bindataTemplatesCommandsTmpl() (*asset, error) {
	bytes, err := bindataTemplatesCommandsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/commands.tmpl",
		size: 9552,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1621278926, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x4d\x6b\xe3\x40\x0c\x86\xcf\xd6\xaf\x10\x3e\x2c\x36\x24\x9e\xec\x35\xb7\x90\xcd\x61\x2f\x4d\x29\x6d\xef\xca\x58\x76\x44\x3d\x1a\x33\x96\xf3\x81\xf1\x7f\x2f\x4e\x28\xbd\x49\x7a\xd0\xf3\xf2\xf6\xe4\xbf\xa8\x65\x0c\x24\x0a\x20\xa1\x8f\xc9\xb0\x80\x2c\x6f\xc5\xce\xe3\xa9\xf2\x31\xb8\x10\x8d\xae\x31\xd5\x2e\xf6\xac\xd4\xcb\xda\x77\xb2\x6e\x59\x39\x91\xc5\xe4\x7c\x27\x39\x94\x00\xcd\xa8\xfe\xe1\x29\x4a\x9c\x20\xf3\x9d\x54\xff\x55\xac\xf8\xb3\x4c\xfb\xa8\x8d\xb4\x13\x64\xd9\xae\xef\x5f\x28\xf0\x16\x11\xf3\x69\xc2\x6a\x59\x70\x9e\xf3\x15\x64\xd9\x41\x2f\xaf\x89\x1b\xb9\x6d\x7f\xd9\x41\x2f\x3f\xf8\x93\xd3\x20\x51\x1f\xaf\x7f\xab\x4d\xb5\x79\x5c\x9d\xc3\x3d\xf9\xb3\x68\xbb\x00\x4b\x23\xaf\xd0\x39\xfc\x50\x1f\x43\x60\x35\x94\x06\xef\x71\xc4\x2b\xa9\xa1\x45\x64\xa5\x53\xc7\x68\xbc\x94\xa5\x74\xc7\x9a\x8c\xd0\x3f\x15\x78\x62\xbb\x32\x2b\xa6\x51\x07\xc8\xe6\x12\x60\x09\x78\x3f\xfe\x3b\x6e\x71\x57\xd7\x98\xb8\x95\xc1\x38\xe1\x62\x27\xad\x07\x3c\x73\xe2\x0a\x9e\x85\xdf\x62\xb4\xea\x70\x63\x3f\x1a\x17\x25\xcc\xf0\x1d\x00\x00\xff\xff\xfc\xe0\xec\xd0\x60\x01\x00\x00")

func bindataTemplatesMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesMainTmpl,
		"templates/main.tmpl",
	)
}



func bindataTemplatesMainTmpl() (*asset, error) {
	bytes, err := bindataTemplatesMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/main.tmpl",
		size: 352,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1621278931, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/commands.tmpl": bindataTemplatesCommandsTmpl,
	"templates/main.tmpl":     bindataTemplatesMainTmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"commands.tmpl": {Func: bindataTemplatesCommandsTmpl, Children: map[string]*bintree{}},
		"main.tmpl": {Func: bindataTemplatesMainTmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
