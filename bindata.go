// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/commands.tmpl
// templates/main.tmpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesCommandsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5b\x73\xdb\xb8\x15\x7e\x26\x7f\x05\x96\xe3\xec\x90\xb1\x4c\x65\xb7\x3b\x7d\x50\x57\x9d\x49\x9c\xc4\xf6\x4c\xec\xb8\xb6\xb3\x79\x70\x3d\x35\x44\x1e\x49\x1c\x93\x00\x0d\x42\xbe\x54\xcb\xff\xde\x39\x00\x48\x82\x17\xc9\x72\xda\x97\xbe\x38\x12\x0f\x88\x73\xff\xce\x45\x19\x8f\xc9\x21\x8f\x81\x2c\x80\x81\xa0\x12\x62\x32\x7b\x26\x3c\x07\x46\xf3\xe4\x20\x4a\x93\x03\x43\xe0\x22\x24\x1f\xbf\x92\xb3\xaf\x57\xe4\xd3\xc7\x93\xab\xd0\x1d\x8f\xc9\x25\x00\x59\x4a\x99\x17\x93\xf1\x78\x91\xc8\xe5\x6a\x16\x46\x3c\x1b\xc3\x13\x2f\x22\x9a\xc2\x78\xf0\x1a\xd7\xcd\x69\x74\x47\x17\x40\xd6\xeb\xf0\x88\x9f\xeb\x2f\x65\xe9\xba\x49\x96\x73\x21\x89\xef\x3a\xeb\x35\x49\xe6\x24\x3c\x51\x0f\x8a\xf0\x73\x26\x49\x59\x7a\xf3\x4c\x7a\xeb\x35\x01\x16\x93\xb2\xec\x1d\xba\x94\x22\x61\x8b\x02\x0f\x16\xfa\xe3\x96\xc3\x57\x49\x06\x78\x52\x26\x19\x58\xc7\x5c\xc7\xdb\x59\x8f\x71\x94\x26\x5e\xfb\x85\xfc\x6e\x31\x06\x21\xb8\x28\x3a\x04\x51\x8c\xff\x0d\x82\xa7\x7c\x31\x4e\xf9\xa2\x43\x2c\xf2\xf9\x2f\x7f\x19\x47\x7c\x26\xe8\x20\xe5\x21\xc9\x41\x28\x0a\xcf\xef\x16\x61\xc2\xc6\xcb\x5f\x19\x67\xe3\x05\x30\x99\x42\x46\x59\xf8\xf0\xab\xe7\x06\xae\xbb\x5e\x93\x18\xe6\x09\x03\xe2\xe5\x54\xd0\xac\xf0\x8c\xea\x07\x44\x50\xb6\x00\x12\x7e\xcd\x65\xc2\x19\x4d\xcf\x15\x59\x51\x15\x39\x99\x13\xb8\x27\xe1\xd5\x73\x0e\xc4\x9b\x71\x9e\x02\x65\xfa\x65\xc7\x89\xb2\x38\xfc\x9c\xd2\x45\xe1\x07\xe1\x07\xce\x53\x1f\xed\x15\x1e\x7e\x39\x39\xa3\xda\x86\x23\x32\xa7\x69\x01\x23\xa2\x08\x1f\xa1\x88\x44\xa2\xf8\x20\x31\x30\x1c\x20\x2d\xa0\xcd\x26\x61\xf2\xaf\xbf\x0d\x31\x39\x41\xc2\x00\x97\x77\xaf\xe5\x30\x4f\x39\xdd\xc0\xe3\xb3\x26\x0d\x71\x09\x77\xe1\xd3\xbf\x51\x87\xdf\xc0\x85\x9e\xf7\xc2\x7d\x75\x84\x1e\x34\x61\x68\xf9\xec\x3b\x4d\x24\x08\xe3\xac\xbe\x33\x1e\x69\x22\x0f\xf0\x7a\x7d\x6e\xb3\x63\x0c\xfd\x72\x89\x39\xa6\xf9\xb7\x58\x46\x69\x12\x5e\x82\x3c\x5c\x15\x92\x67\x9a\x47\x94\xc5\x81\xeb\x3a\xc9\x9c\xd8\x7c\x8f\x69\x61\x3e\x92\xb5\xeb\x38\x3a\xd4\xc2\x0f\x09\x8b\xcf\xeb\xd7\xaa\xc3\x81\xeb\x94\xae\x95\x5f\xeb\x35\xd9\x63\x28\xde\x64\x4a\x42\x23\xa7\x7a\x48\xf3\x44\x3d\x3b\xe2\x9d\xa7\xe7\xab\x59\x9a\x44\x8a\xa6\x3f\x36\x27\xdc\x07\x2a\x48\xf5\x72\x59\x5e\xae\x66\x11\xcf\x32\xca\x62\x82\x21\xec\xba\xf3\x15\x8b\x6c\x3a\x88\x07\x10\x28\xf6\xf5\x4d\x46\xf3\x6b\x8d\x12\x37\xfa\x1f\x54\x45\x80\x5c\x09\x36\x44\x5d\x2b\x5f\x19\x8f\xec\x15\xea\x22\x25\x92\xb9\xd3\xc4\xc3\xe0\x7b\x8e\xe3\xc5\x8d\xe7\xbd\x89\xf2\x86\xb9\xa3\x1b\x13\x23\x7d\x7e\x25\xd2\xce\xb9\x6f\x17\x5f\x6a\x7a\x39\xd2\xd2\x54\x81\x53\xba\xda\xb0\x46\xba\x85\xe0\xab\x5c\xdb\x12\x3f\x69\xd9\xd0\x52\x51\x16\xab\x27\x78\xad\x3a\xd4\x18\x9b\x4c\xc9\xcf\x0a\x80\xc2\x43\x6d\x41\x14\xfc\x5b\x01\x46\x08\x7d\xba\x0e\x2b\xd7\x71\x54\x14\xb5\xa8\x75\x5c\x21\xf9\x0b\x67\x8b\x09\xb9\x6d\xa8\xf8\x80\x94\xe5\xed\xa8\x1f\x0f\x46\x6c\x9e\x23\xac\xa2\x1d\x50\xf4\xaf\xd5\x37\x2d\xfe\x78\x4c\xda\xe1\x50\x96\x18\xd2\x8d\xfc\xf8\xad\x92\xc0\x75\x6c\xc7\x0f\xbf\xe0\xd7\x8c\xc3\x0b\xb8\x5f\x25\x02\xe2\x1a\x13\xdb\x37\x6b\x47\x8e\x48\x2d\xb4\x8e\x77\xf2\x56\xc1\x72\xf8\x07\xfe\x35\xc5\xe5\x90\xb2\x63\xfa\x00\x1f\x78\xfc\x4c\xca\x72\x44\x66\xf8\xc1\x04\x42\xf5\x76\x40\xfc\xb7\x0d\x70\x5f\x40\x91\x73\x86\x29\x8a\x4c\x2f\x54\xfc\x29\xec\xc2\xd7\x55\x25\xd1\x39\xb6\xa4\x2c\x4e\x41\x9c\x53\xb9\x44\xf3\xa8\x7c\x3e\xd6\xcf\x2a\xaf\xb8\x0e\xe6\xe9\x60\x36\xa8\x28\xb4\xaf\xd0\x37\xe8\x44\x2c\x4b\xe2\x91\x7d\x62\x91\x5d\xc7\x41\x3c\x70\x9a\x30\xd7\xaa\x1e\x81\xac\x40\x4e\x93\x14\x84\x25\x73\x62\x0e\x4e\xa7\xc4\xf3\x34\xb3\xea\xc9\x50\xf6\x5d\xd7\xb7\x9d\x30\x59\x5d\x75\x90\xb0\x18\x9e\xbc\xe0\xe6\x5a\x05\xff\x4d\x25\xc3\x4a\xa4\x28\x80\x3e\xb4\xaf\xf4\x56\x1a\xa0\xc2\x06\x3f\x4d\xfc\x24\x23\xb2\xa7\x5c\xa3\xe2\xa7\xe7\x54\x94\xaa\xa9\x74\xfa\x64\x78\xc2\xb0\x52\xca\x65\x55\x21\x14\xbb\xa9\x71\x59\x11\x5e\x40\x9e\xd2\x08\xfc\x95\x48\x15\x86\xde\xae\x6f\x55\x74\x98\xb7\x8d\xe5\xd7\xeb\xdb\xf2\x56\xa1\x6d\x43\xaa\xc3\x67\x44\x7e\x09\x2a\xd6\x55\xbe\xb6\x61\xd7\x11\x70\x8f\x22\x23\xfc\x1e\xa6\x09\x30\x19\xa2\x96\xa7\x20\x97\x1c\x8f\xf8\x01\x26\x3f\xca\x10\xb8\x2d\x14\xda\x49\xe1\xbe\xbe\xf7\x2b\x10\xcf\xb5\xc2\xc8\x7c\x4a\x04\xdc\x87\xef\xe3\xf8\x1f\x48\xd2\x15\xac\x29\x21\x03\x4a\x19\x8d\xec\x8a\x6b\x31\x58\x02\x8d\x41\x0c\x73\x38\x56\xb4\xd7\xb0\x68\x6c\x66\x99\xec\x85\x8e\xc6\x69\x67\xf0\x64\x4a\x4c\x8d\x3a\x02\x89\x24\x95\x61\x7f\x12\x99\xc8\x54\x61\x41\xb7\x66\x2b\xe6\x3a\x99\xac\x6b\x7e\x52\xd1\xac\x5e\x3e\x4b\x52\x05\x3a\x4a\x41\xab\x7f\xea\xdb\x77\x07\x03\xcf\x33\x19\x5e\xe6\x22\x61\x72\xee\x7b\x6f\x1e\xb4\x3d\x2c\x4b\x04\x35\x17\xbb\xc3\x19\xb0\xf4\x2e\xa6\x7e\x05\xb3\xca\xf2\x4e\x3f\x64\x07\xf1\xce\x18\x4d\x81\xde\x4f\x0d\x14\x0c\x4b\x75\xc8\x99\x04\x26\x0f\xd0\x9a\x55\x7f\x74\x0a\x71\x42\x0d\xfa\x79\xd8\xde\xc4\xcf\x06\x6f\xf0\xce\xa0\x11\xc5\x92\x04\xb3\x46\x03\xe1\x07\x98\x73\x01\xbe\x85\x63\x23\xe3\xf6\x11\x32\x0f\x74\xaa\x15\xb9\xc2\x55\x8c\x09\x94\xe8\x23\xf7\x0d\x86\xe1\xc3\x9f\xa6\x84\x25\xa9\x16\xdb\xf4\x02\x2c\x49\x47\xfa\x8f\xee\xeb\xc3\xef\x82\xe6\x3e\x08\x31\x22\x1e\xa6\x1c\x14\x92\xcc\x69\x92\x42\xac\xa2\x46\xc9\x84\xb5\x36\x86\x88\xc7\x10\xf7\x61\xdd\xd5\xec\x50\x92\xf0\x52\x52\xb9\x2a\xd4\xf4\xf5\x3b\xf9\xed\xdd\x3b\xcd\xd9\x08\x63\x20\xe1\x1b\xcb\xa8\x28\x96\x34\xad\x4a\x85\xaf\x95\xf8\xd9\x70\x08\xfe\xd6\x13\x7d\x17\xd9\xeb\x6b\x53\xec\x7d\x84\xb9\xdb\x56\x45\xd9\xba\xd4\x31\xb7\xd5\x22\x9f\xf0\x9f\xb9\xef\x1d\x5f\x5d\x9d\x93\x37\xf1\x84\xbc\x29\xbc\x51\x57\xc1\xfa\x81\xf2\x67\x50\xdb\x8a\xce\x25\xd4\xba\x6a\x47\xbe\xc7\x47\x9b\xfc\x88\xaa\x57\x9a\x6b\x4b\xea\x1b\x6c\xfd\x2b\xdb\x4f\x35\x4d\x07\x2b\x83\x96\x23\x70\xfa\x00\x31\xa7\x11\xac\x4b\x4c\xa0\xd0\xef\x79\x2a\xb0\xe1\xc7\x20\xb5\xb2\x40\x4b\x0a\x65\x8b\x8d\x4d\xcd\xa3\xea\xb9\x15\x40\xdb\x6d\xfc\xab\xfa\x93\xba\x15\xfa\x5f\x74\x2a\x81\xf6\x9a\x32\x14\x95\x12\xb2\x5c\xa2\x74\xef\x5c\xc7\x99\x73\x41\xaa\x47\xbf\x2b\xe9\xb4\xf4\xe1\x7b\xfd\xb0\xa8\x21\xcf\x9c\xda\xdf\x77\x75\x5c\xb4\xcc\x61\x62\x77\x48\xbb\x46\x93\xff\x46\xcf\x9e\x82\x81\x95\x35\x43\x79\xd0\x8f\xfe\x43\xbe\x4a\x63\xc2\xb8\x24\x11\x4d\x53\x62\xbc\x54\x77\xa0\x55\xfc\xe3\x5f\x4c\x66\x1a\xc9\x15\x4d\x89\x15\x32\x15\x25\xa3\x32\x5a\xea\x69\xc3\xb1\x6b\xb3\x7a\x6e\x1c\x7f\xaa\x3f\x57\xb5\xc9\xd1\xb7\x69\x43\xe9\xb8\x3f\x02\xa9\x0e\xfd\x41\xd3\x95\xce\xef\x50\xe1\xe3\x93\x34\xc8\x78\x09\x29\x44\xba\xb9\xae\x4a\xd9\xfb\x34\xbd\x04\x29\xb1\x4f\xf1\x83\x56\x4e\x0c\xdb\x62\x17\x63\x2c\x40\x92\x4a\xf2\x07\x94\x45\x1b\xc2\x58\xc2\x51\x24\x5b\x6e\x25\xb4\xae\x30\x57\x08\x84\x4a\xbe\xeb\x9b\xd9\xb3\x04\x95\x4e\x9f\x9e\x72\x88\x24\xc4\xe4\x4f\xa2\x4b\x0e\xf1\xde\xdc\x63\xb6\x05\x23\x63\xd3\x1f\x91\xf7\xbb\x91\x50\xdb\x1e\x11\x6b\x25\x6a\x49\xeb\x1a\xa9\xa9\xe6\xae\xba\x0f\x52\x88\x04\xc4\xab\xde\xaa\x4b\x67\x87\x5d\x85\x69\x3a\x69\x49\x44\x19\xda\x47\x00\x8d\x96\x24\x86\x02\x83\x93\x14\xea\xaa\x19\x44\x74\x55\x00\x79\x53\x90\xa4\xd0\xd0\xd7\x73\xd9\x76\x5b\xd4\x22\x5a\x8b\x05\xc7\x71\x66\x02\xe8\x5d\x43\xab\xab\xb1\x53\xb6\x5b\x23\xfc\x26\x93\x0c\xc2\xcb\x14\x20\xf7\xf5\xa2\x21\xa5\x58\x91\xdf\xea\xe7\x10\x71\x16\xd7\x88\x8b\x90\x69\xb2\xfc\xef\xd3\xad\x69\xde\x36\xc9\x19\x3c\xfa\xde\x29\x7d\x4a\xb2\x55\x56\xdd\x50\x10\x78\x8a\x00\x62\xbb\xfa\x35\x65\xa2\x83\x8a\x9d\x69\xfc\x02\x16\x49\x81\x48\x5f\xb4\xc7\x76\x35\xf0\x08\xce\x65\x55\x15\x2e\x38\x97\x7a\x09\x51\xb4\x47\x1a\x75\x68\x68\x70\xb5\x26\x57\x66\xcd\xac\xf6\xd0\x1a\x5e\x99\xe6\x4f\x53\xf4\xbc\xaa\x63\x5a\xdc\xc5\xfc\x91\xf9\x83\x2b\x9b\x91\x5b\xf7\x20\xfd\x31\x6b\x4a\xa4\x58\x81\x6b\x17\xcd\x4a\x7e\x33\x9b\x4e\x3b\xbc\xed\x13\x6a\x42\x9e\xee\x20\x83\xeb\xe8\x05\xd1\xd6\x79\xdf\x84\xbc\x99\xbe\xcf\xa9\x00\x26\x9b\xa5\x55\x67\x0d\xa0\xc9\x0d\xc2\x62\xa3\x66\xcc\xe9\x6f\x59\x1a\x04\x6e\x37\x6c\xd1\x23\xaf\x7c\xb9\x59\xcf\x5a\xbb\x2f\xd5\x5d\xb6\xf6\x5e\x18\xa3\xa8\xe3\x46\x67\xe3\x81\xb6\x97\xf1\x7d\xa2\x8a\x1a\x89\x40\x48\x9a\x30\x02\x0f\x68\x06\x2e\xea\xdc\xc5\x96\x91\xe8\x88\x4d\xd8\xc2\x8e\x05\xef\x43\xca\xa3\x3b\x0c\x70\x88\x56\xca\xf6\xe8\xe2\x55\x01\x05\xc9\xb9\xee\x9a\x24\x27\x39\x88\x84\xc7\x09\x56\x91\x67\x12\x2d\x21\xba\xfb\x01\x8e\xa5\xdb\xb7\x1c\xaa\xd3\x99\xf7\x36\xf4\x12\x8e\xee\x26\xcc\x32\xae\x5a\xc7\x35\x53\x3b\xe6\xad\xc6\x98\x28\x8b\x37\x98\xd0\xca\x98\xf0\x5b\xd1\xa4\x45\x3d\xdc\x84\xef\xd3\x84\xa2\xee\x35\x3c\x99\x07\x13\x72\xdd\x5a\x75\x39\xad\xe1\xac\xf7\x96\xe3\x28\x1e\x16\x83\xee\xb0\x51\xed\xb7\x06\x08\x76\xfa\xb6\xb6\x4d\x5b\x12\xd8\xec\x9d\x74\xe6\xa2\xd8\x62\x51\x4c\x88\xb6\xc0\x69\xc2\x10\xcc\xce\xf0\x19\xe2\x66\x0a\x6c\x6b\x17\x52\xdd\x71\xb1\x62\x13\x82\x46\xc7\xf8\x26\x6f\x5b\xe6\x1c\x11\x2a\x16\x45\x6d\x94\xca\x29\x76\x57\xbf\x63\xdf\xb7\xf7\xd4\x9a\xef\xb7\xc8\x85\x1c\xaf\xf1\xd6\x27\x52\x96\x37\xfd\xf6\x68\x60\x42\x70\x1c\x27\xe5\x8b\xf0\x33\x95\x34\xf5\x03\x2c\x77\x58\x5c\x83\xf0\xb4\x58\xf8\x9e\x2a\x7e\xaa\x29\xc2\x08\x0d\x2a\xaf\xb8\xb6\x73\xf4\x37\x3c\xd3\xc9\xf7\xc0\x35\x13\x24\xc1\x0a\x91\xaa\x6a\x5b\xfd\x18\xd1\x28\x51\x4d\x96\xfe\x76\x18\xd8\x65\x35\xd8\x0e\xff\xe1\xe8\xaf\xda\x35\x78\xa2\x59\x9e\x42\x61\x5a\x65\xb7\xdd\xb4\xc1\x93\xba\xff\x53\x75\xc8\xc4\x5d\xfd\xd2\xfe\x94\x78\x44\x2d\xcb\x6a\xd0\x36\x8a\xe3\x94\xe2\x07\x64\x9f\x78\xca\xbb\xb5\xbc\x26\x99\xd4\x43\x40\xef\xfc\x93\x79\xfd\xea\xbd\x25\x2f\x37\xa4\xe5\xa6\xac\xdc\x98\x94\x5b\x73\xb2\x97\x92\xdd\xc4\x2b\x47\x03\x5b\x81\x6d\xe9\xb8\x63\x36\x56\x6a\x1c\x27\x71\x0c\xac\x66\xa7\xbf\x4e\x54\xdb\x54\x93\x06\x45\x30\xae\x9a\xd4\x8e\xd5\xa7\x5e\x4c\xf2\x4d\xa9\xfd\x23\x99\x5d\x29\xd1\x5f\x86\x38\xce\x8c\xc7\xcf\x23\x7b\x9a\x3f\x02\x89\x07\xfc\xfe\xbe\x43\x5f\x7f\x3d\x2c\x61\x59\x4e\x6e\x4c\x1e\x0e\xf6\xca\x5b\x92\xf9\x1b\xa3\xb3\x14\xb0\x56\x61\x77\x8f\x02\x55\x19\x5d\xf6\x50\xd6\x6e\x96\xc3\x33\x80\xb8\xa8\x96\x0e\xa4\x2c\x71\x2c\x69\xaa\xfd\xbf\xea\x10\xde\x6d\xf4\x7b\x19\xe0\x5e\x0b\x6b\x5b\x76\xee\xcd\xb2\xfd\xc7\x6c\xa6\x01\x30\x32\xcb\x91\xce\x58\x58\x8f\x43\x9d\x45\xcd\x67\x2e\x32\x6c\x8b\x85\xf9\xe4\x6f\x59\xd0\x6c\x63\x6e\xee\x41\xce\xf6\x36\xa6\x61\x3b\xd4\x1e\xe9\x09\xe6\xfe\xbc\x46\xbf\xa1\x29\xd1\xad\xd3\x7b\x70\x85\x6c\xc1\xd6\xe0\x32\xb9\xc5\xe3\xda\xeb\xed\xc1\xbd\x1b\x32\xad\x83\x78\x0f\x7b\xe3\x9b\x86\x61\x2b\xc2\xb6\x0c\xd5\x83\xf1\x38\xfc\x53\xa8\x71\x41\xb3\xda\x7d\xf1\xf7\xd0\xa6\x1a\x3b\x8f\x9b\x0b\x45\x9b\xa7\x8a\xd2\x42\x0d\x73\x5c\x37\x5f\x88\x24\x76\x47\xf3\xfa\x79\xbe\xb9\x4f\x25\x7e\x6d\xd4\xce\x18\xbf\x39\x74\xb7\x06\xd0\xcb\xf3\xbc\x1d\x4d\xa8\x80\x58\x54\x69\x86\x0a\xf6\x57\xc4\xf6\xac\x3e\xe4\xa1\xf6\xef\x30\x71\xd7\x60\xbd\x28\xfa\xff\x37\x99\x09\x9f\xf0\x12\xa4\xc2\xf2\xbd\x24\x36\x20\xfe\xa2\xa9\xb6\x37\x82\x26\x68\x37\xc1\xe5\x50\x20\x5a\xee\xb3\x40\xf2\x71\x6b\xf3\xb7\xc5\x16\x66\xe5\xa1\xa6\xfe\x46\xf9\xb2\xdd\x05\x76\xea\xb0\xae\xce\xd6\xd8\xd9\x40\x89\x9a\xff\xac\xff\x2e\x81\x7d\x4c\xff\x17\x36\x43\x19\x11\xef\xa0\xdd\x40\x1d\xb5\x7f\x79\x56\xff\x99\x42\xff\xa2\x66\xcf\x96\xdd\xf3\x9b\x26\xd9\x9d\x26\xd6\xa0\xfb\x1b\xc3\x86\x66\xd6\x2c\x86\xfd\xc0\x6e\x5b\x4b\xf7\x3f\x01\x00\x00\xff\xff\xd8\xb0\xc3\xf8\x50\x25\x00\x00")

func bindataTemplatesCommandsTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesCommandsTmpl,
		"templates/commands.tmpl",
	)
}



func bindataTemplatesCommandsTmpl() (*asset, error) {
	bytes, err := bindataTemplatesCommandsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/commands.tmpl",
		size: 9552,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600790364, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\xc1\x4a\xc4\x40\x10\x44\xcf\xd3\x5f\xd1\xe4\x20\x09\xb8\x93\xf5\x9a\xdb\xa2\x39\x78\x71\x45\xc4\xfb\x38\xe9\x64\x1b\x33\xdd\xc3\x64\xb2\x04\x42\xfe\x5d\xb2\x22\x7b\xab\xaa\x47\x15\x15\x9d\xff\x71\x03\x61\x70\x2c\x00\x1c\xa2\xa6\x8c\x25\x98\x62\xe0\x7c\x99\xbf\xad\xd7\x50\xd3\xa2\x93\x77\x23\xd5\x1a\x49\x5c\xe4\x83\x1f\xf9\x30\x90\x50\x72\x59\x53\xed\x47\x2e\xa0\x02\xe8\x67\xf1\xb7\x9d\xb2\xc2\x15\x8c\x1f\xd9\xbe\x0a\xe7\xf2\x61\x57\xcf\x2a\x3d\x0f\x2b\x18\x73\x8a\xf1\xcd\x05\x6a\x10\xb1\x58\x57\xb4\xbb\xc1\x6d\x2b\x1e\xc1\x98\x56\xae\xef\x89\x7a\x5e\x9a\x3b\x6b\xe5\xfa\x8f\xbf\x28\x4d\xac\x72\xab\x3e\xd9\xa3\x3d\xee\xe9\x56\x01\x98\xba\xc6\xcf\xf3\xcb\xb9\xc1\x53\xd7\x61\xa2\x81\xa7\x4c\x09\xbd\x86\xe0\xa4\x9b\xf0\x42\x89\x2c\xfc\x7d\xfa\x50\xcd\xb6\x5d\xc8\xcf\x99\xca\x0a\x36\xf8\x0d\x00\x00\xff\xff\xe5\xd5\x27\x9a\x03\x01\x00\x00")

func bindataTemplatesMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesMainTmpl,
		"templates/main.tmpl",
	)
}



func bindataTemplatesMainTmpl() (*asset, error) {
	bytes, err := bindataTemplatesMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/main.tmpl",
		size: 259,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600784439, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/commands.tmpl": bindataTemplatesCommandsTmpl,
	"templates/main.tmpl":     bindataTemplatesMainTmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"commands.tmpl": {Func: bindataTemplatesCommandsTmpl, Children: map[string]*bintree{}},
		"main.tmpl": {Func: bindataTemplatesMainTmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
